var documenterSearchIndex = {"docs":
[{"location":"comparisons/bioconductor/#bioconductor","page":"Bioconductor (R)","title":"Bioconductor (R)","text":"","category":"section"},{"location":"comparisons/bioconductor/","page":"Bioconductor (R)","title":"Bioconductor (R)","text":"Bioconductor represents an ecosystem of related genomics tools written in the R programming language\nTools written in other languages, such as C and Python, are also included with R wrappers available \nLaunched over two decades ago, it now hosts over 2000 packages for bioinformatics and related fields\nPackages cover a broard range of methods for the analysis and manipulation of genomic data","category":"page"},{"location":"comparisons/bioconductor/","page":"Bioconductor (R)","title":"Bioconductor (R)","text":"A few equivalent applications between BioJulia and Bioconductor:","category":"page"},{"location":"comparisons/bioconductor/","page":"Bioconductor (R)","title":"Bioconductor (R)","text":"Application BioJulia packages Bioconductor packages\nData structures BioSymbols, KmerAnalysis, IntervalTrees Biobase\nSequence annotation GenomicFeatures, GenomicAnnotations, FormatSpecimens AnnotationHub\nInput/Output FASTX, XAM, BigWig,... BiocIO, Biostrings, ShortRead,...\nSequence alignment BioSequences, BioAlignments Biostrings\nExpression analysis SingleCellProjections DESeq2","category":"page"},{"location":"comparisons/bioconductor/","page":"Bioconductor (R)","title":"Bioconductor (R)","text":"A few package/ecosystem equivalents between Julia and R:","category":"page"},{"location":"comparisons/bioconductor/","page":"Bioconductor (R)","title":"Bioconductor (R)","text":"Application Julia R\nData manipulation/analysis DataFrames, CSV, Query tibble, dplyr\nPlotting/visualization Gadfly, VegaLite, Makie ggplot2, vegalite, plotly\nStatistical analysis Statistics, HypothesisTests, GLM stats\nMachine learning Flux, SciML, Zygote mlr3, caret, tidymodels, Deriv\nNumerical mathematics LinearAlgebra, IterativeSolvers Matrix, pracma, deSolve\nWeb applications Genie, Franklin shiny","category":"page"},{"location":"comparisons/bioconductor/","page":"Bioconductor (R)","title":"Bioconductor (R)","text":"A few notable differences between Julia and R:","category":"page"},{"location":"comparisons/bioconductor/","page":"Bioconductor (R)","title":"Bioconductor (R)","text":"Julia R\nHigh-level, general-purpose compiled language High-level, interpreted language for statistical computing\nDynamically typed with multiple dispatch and optional type annotations Dynamically typed without type annotations support\nBuilt-in parallelism via threads, coroutines (Tasks) Parallelism via external libraries (BLAS, parallel,...)\nExtensive metaprogramming (Lisp-like macros, generated functions,...) Less extensive metaprogramming (function factories, expression manipulation,...)\nSingle implementation available (JuliaLang) Multiple implementations available (pqR, Renjin,...)","category":"page"},{"location":"comparisons/bioconductor/","page":"Bioconductor (R)","title":"Bioconductor (R)","text":"To transition from R to Julia:","category":"page"},{"location":"comparisons/bioconductor/","page":"Bioconductor (R)","title":"Bioconductor (R)","text":"See Noteworthy differences from R in the Julia manual for a more in-depth comparison\nUse RCall.jl to seamlessly integrate R code into your Julia project\nUse JuliaCall to seamlessly integrate Julia code into your R project","category":"page"},{"location":"comparisons/bioruby/#bioruby","page":"BioRuby (Ruby)","title":"BioRuby (Ruby)","text":"","category":"section"},{"location":"comparisons/bioruby/","page":"BioRuby (Ruby)","title":"BioRuby (Ruby)","text":"BioRuby represents an ecosystem of related biology tools written in the Ruby programming language\nUnlike with BioJulia, BioRuby tools are installed together as classes/modules into a single bio gem\nLaunched in 2000 with two major releases covering the Ruby1/2/3 transitions\nPrimarily composed of wrapper classes/modules for common bioinformatics, molecular biology applications ","category":"page"},{"location":"comparisons/bioruby/","page":"BioRuby (Ruby)","title":"BioRuby (Ruby)","text":"A few equivalent application tools between BioJulia and BioRuby:","category":"page"},{"location":"comparisons/bioruby/","page":"BioRuby (Ruby)","title":"BioRuby (Ruby)","text":"Application BioJulia packages BioRuby classes/modules\nSequence alignment BioSequences, BioAlignments Bio::Sequence, Bio::Alignment\nInput/Output FASTX, XAM, BigWig,... Bio::Fasta, Bio::Fastq,...","category":"page"},{"location":"comparisons/bioruby/","page":"BioRuby (Ruby)","title":"BioRuby (Ruby)","text":"A few package/ecosystem equivalents between Julia and Ruby:","category":"page"},{"location":"comparisons/bioruby/","page":"BioRuby (Ruby)","title":"BioRuby (Ruby)","text":"Application Julia Ruby\nData manipulation/analysis DataFrames, CSV, Query daru, CSV\nPlotting/visualization Plots, Makie Chartkick, gruff\nStatistical analysis Statistics, HypothesisTests, GLM, Distributions Statsample, distribution\nMachine learning Flux, SciML Rumale, TensorStream\nNumerical mathematics LinearAlgebra NMatrix, minimization, integration\nNotebook/report generator IJulia, Pluto IRuby\nWeb applications Genie, Franklin Hanami, Jekyll","category":"page"},{"location":"comparisons/bioruby/","page":"BioRuby (Ruby)","title":"BioRuby (Ruby)","text":"A few notable differences between Julia and Ruby:","category":"page"},{"location":"comparisons/bioruby/","page":"BioRuby (Ruby)","title":"BioRuby (Ruby)","text":"Julia Ruby\nHigh-level, general-purpose compiled language High-level, general-purpose interpreted language\nDynamically typed with multiple dispatch and optional type annotations Dynamically typed with optional type annotations (Sorbet, RBS)\nBuilt-in parallelism via threads, coroutines (Tasks) Built-in parallelism via threads, fibers\nLisp-inspired metaprogramming (S-expressions, homoiconicity,...) Macro-less metaprogramming capabilities (dynamic reflection, eval methods,...)\nSingle implementation available (JuliaLang) Multiple implementations available (TruffleRuby, mruby,...)","category":"page"},{"location":"comparisons/bioruby/","page":"BioRuby (Ruby)","title":"BioRuby (Ruby)","text":"To transition from Ruby to Julia:","category":"page"},{"location":"comparisons/bioruby/","page":"BioRuby (Ruby)","title":"BioRuby (Ruby)","text":"Read the Julia manual for an in-depth look at its internals and features\nSee Running External Programs in the manual for running Ruby scripts or other programs from Julia","category":"page"},{"location":"getting_started/biojuliainstallation/#biojuliainstallation","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"","category":"section"},{"location":"getting_started/biojuliainstallation/#Standard-installation","page":"Installing BioJulia Packages","title":"Standard installation","text":"","category":"section"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"As with any Julia package, you can easily install any BioJulia package with the help of the official package manager included by default with every Julia installation. All you need to know is the name of the package of interest!","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"There are two standard methods to install a package:","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"note: Note\nThe Julia package manager, similarly to conda and others, organizes dependencies according to the \"environment\"  they are in, meaning in which directory the packages are installed to. The default Julia session adds packages  to a \"global\" environment, usually the .julia/environments/v1.x directory. When you are developing a package,  you must activate its project-specific environment by calling activate MyProjectName (see Package development  below) so that you can isolate your dependencies from the global environment and manage them independently. See  Working with Environment for more details.","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"The package manager (Pkg) module","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"# You can exclude the semicolon, it is used here for suppressing output \nusing Pkg;\n# Install the package\njulia> Pkg.add(\"<name of package here>\");\n# Use the installed package\nusing <name of package here>","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"note: Note\nOne excellent trick is that any Julia code with the julia> prompt included at the beginning of the line can be copy/pasted as is into the REPL! See the Julia REPL section for more.","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"Pkg mode","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"# Enter ]\n]\n# @v1.x will show your current Julia version\n(@v1.9) pkg> add <name of package here>\n# Exit Pkg REPL mode via the Backspace key\njulia> using <name of package here>","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"note: Note\nJust like with the previous method, you can copy/paste code with the (@v1.x) pkg> prompt included and Julia will work correctly! You can even skip having to enter Pkg mode by just entering directly (@v1.x) pkg> add.... You do not need to manually change the version number indicated in the  prompt if you have a different Julia version than that which is listed, it is again handled for you.","category":"page"},{"location":"getting_started/biojuliainstallation/#pkg-devel","page":"Installing BioJulia Packages","title":"Package development","text":"","category":"section"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"If you are interested in developing a new or existing BioJulia/Julia package, the package manager can also help you by first cloning the package repository to your development machine. Pkg will then load the required  dependencies in a new dependency environment based on the package's Project.toml file. Thereafter, both the  direct and indirect dependencies can be locked using a generated Manifest.toml if needed and a pull request  can be submitted. ","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"There are two standard methods to set up Julia for developing a package:","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"The package manager (Pkg) module   ","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"using Pkg;\njulia> Pkg.develop(\"<name of package here>\");\nusing <name of package here>","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"Pkg mode","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"# Enter ]\n]\n# If the package is within a remote Git repository, write instead\n# `dev https://github.com/<name of account>/<package name>`\n(@v1.9) pkg> dev <name of package here>\n# Make sure you are within the same directory as the package folder\n(@v1.9) pkg> activate /path/to/package/folder/PackageName\n# The previous command activates the environment as directed by the\n# package's Project.toml file. This next command will then download\n# all of the dependencies specified in that file into your Julia environment.\n(@v1.9) pkg> instantiate\n# Exit REPL via the Backspace key\njulia> using <name of package here>","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"note: Note\nYou can skip straight to (@v1.9) pkg> activate ... if you have already installed the package code locally, simply make sure to point Pkg to the right path as shown above.","category":"page"},{"location":"getting_started/biojuliainstallation/","page":"Installing BioJulia Packages","title":"Installing BioJulia Packages","text":"You can now change your source code and load them into the Julia session with using <name of package here>. To test your code, run (@v1.9) pkg> test to run the package's test suite to ensure that everything works correctly. When you are done developing the package, enter (@v1.9) pkg> free to stop tracking the package. ","category":"page"},{"location":"comparisons/biojava/#biojava","page":"BioJava (Java)","title":"BioJava (Java)","text":"","category":"section"},{"location":"comparisons/biojava/","page":"BioJava (Java)","title":"BioJava (Java)","text":"BioJava is a biological data processing library written in the Java programming language\nBioJava tooling is distributed via multiple classes within the same org.biojava package\nLaunched in 2002 with six major releases covering more than 11 Java releases","category":"page"},{"location":"comparisons/biojava/","page":"BioJava (Java)","title":"BioJava (Java)","text":"A few equivalent applications between BioJulia and BioJava:","category":"page"},{"location":"comparisons/biojava/","page":"BioJava (Java)","title":"BioJava (Java)","text":"Application BioJulia packages BioJava modules\nInput/Output FASTX, XAM, BigWig,... nbio.genome.io.fastq, nbio.ontology.obo,...\nSequence alignment BioSequences, BioAlignments nbio.sequence, nbio.alignment\nMacromolecular structures BioStructures nbio.structure","category":"page"},{"location":"comparisons/biojava/","page":"BioJava (Java)","title":"BioJava (Java)","text":"A few package/ecosystem equivalents between Julia and Java:","category":"page"},{"location":"comparisons/biojava/","page":"BioJava (Java)","title":"BioJava (Java)","text":"Application Julia Java\nData manipulation/analysis DataFrames, CSV, Query Tablesaw\nPlotting/visualization Plots, Makie JFreeChart, Jzy3d\nStatistical analysis Statistics, HypothesisTests Statistics (Apache Commons), NM Dev\nMachine learning Flux, SciML Java-ML, Neuroph\nNumerical mathematics LinearAlgebra NM Dev\nNotebook/report generator IJulia, Pluto IJava\nWeb applications Genie, Franklin Grails, Javalin","category":"page"},{"location":"comparisons/biojava/","page":"BioJava (Java)","title":"BioJava (Java)","text":"A few notable differences between Julia and Java:","category":"page"},{"location":"comparisons/biojava/","page":"BioJava (Java)","title":"BioJava (Java)","text":"Julia Java\nHigh-level, general-purpose compiled language High-level, object-oriented, two-step (compiled and interpreted) language\nExpression-based (statements yield a value) Statement-based (assignment as a statement)\nDynamically typed with multiple dispatch and optional type annotations Statically typed with required type declarations\nBuilt-in parallelism via threads, coroutines (Tasks) Built-in parallelism via threads, streams, fibers (Project Loom)\nExtensive metaprogramming (Lisp-like macros, homoiconicity,...) Less extensive metaprogramming (reflection, annotations,...)\nIncluded default package manager No default package manager (dependency/build management tools include Maven, Gradle,...)\nSingle implementation available (JuliaLang) Multiple implementations available (OpenJDK, GraalVM,...)","category":"page"},{"location":"comparisons/biojava/","page":"BioJava (Java)","title":"BioJava (Java)","text":"To transition from Java to Julia:","category":"page"},{"location":"comparisons/biojava/","page":"BioJava (Java)","title":"BioJava (Java)","text":"Use JavaCall.jl to seamlessly integrate Java code into your Julia project\nSee Running External Programs in the Julia manual for running Java scripts or other programs from Julia","category":"page"},{"location":"comparisons/scikitbio/#scikitbio","page":"scikit-bio (Python3)","title":"scikit-bio (Python3)","text":"","category":"section"},{"location":"comparisons/scikitbio/","page":"scikit-bio (Python3)","title":"scikit-bio (Python3)","text":"scikit-bio represents a Python3 library providing data structures, algorithms, and additional bioinformatics resources\nUnlike with BioJulia, scikit-bio tools are installed together as modules into a single skbio package \nLaunched in 2014 based on a BSD-relicensing of PyCogent and QIIME code and is currently in beta/maintenance mode","category":"page"},{"location":"comparisons/scikitbio/","page":"scikit-bio (Python3)","title":"scikit-bio (Python3)","text":"A few equivalent application tools between BioJulia and scikit-bio:","category":"page"},{"location":"comparisons/scikitbio/","page":"scikit-bio (Python3)","title":"scikit-bio (Python3)","text":"Application BioJulia packages scikit-bio modules\nSequence alignment BioSequences, BioAlignments skbio.sequence, skbio.alignment\nInput/Output FASTX, XAM, BigWig,... skbio.io\nData structures IntervalTrees skbio.tree","category":"page"},{"location":"comparisons/scikitbio/","page":"scikit-bio (Python3)","title":"scikit-bio (Python3)","text":"A few package/ecosystem equivalents between Julia and Python3:","category":"page"},{"location":"comparisons/scikitbio/","page":"scikit-bio (Python3)","title":"scikit-bio (Python3)","text":"Application Julia Python3\nData manipulation/analysis DataFrames, CSV, Query pandas, Blaze\nPlotting/visualization Plots, Gadfly, Makie matplotlib, seaborn, bokeh, plotnine, VisPy\nStatistical analysis Statistics, HypothesisTests, GLM SciPy, statsmodels\nMachine learning Flux, SciML, Zygote PyTorch, TensorFlow, scikit-learn, JAX\nNumerical mathematics LinearAlgebra, Symbolics NumPy, SciPy, SymPy\nNotebook/report generator IJulia, Pluto, Weave IPython, Jupyter Book\nWeb applications Genie, Franklin Django, Flask, Pelican, Dash","category":"page"},{"location":"comparisons/scikitbio/","page":"scikit-bio (Python3)","title":"scikit-bio (Python3)","text":"A few notable differences between Julia and Python3:","category":"page"},{"location":"comparisons/scikitbio/","page":"scikit-bio (Python3)","title":"scikit-bio (Python3)","text":"Julia Python3\nHigh-level, general-purpose compiled language High-level, general-purpose interpreted language\nExpression-based (statements yield a value) Statement-based (assignment as a statement)\nDynamically typed with multiple dispatch and optional type annotations Dynamically typed with optional type annotations\nBuilt-in parallelism via threads, coroutines (Tasks) Limited (GIL) built-in parallelism via threads, async/await\nExtensive metaprogramming (Lisp-like macros, homoiconicity,...) Less extensive metaprogramming (decorators, metaclasses,...)\nIncluded default package manager No default package manager (poetry, conda, and other alternatives available)\nSingle implementation available (JuliaLang) Multiple implementations available (PyPy, Numba,...)\nArrays are column-major (columns are contiguous in memory) (Numpy) arrays are row-major by default (rows are contiguous in memory)","category":"page"},{"location":"comparisons/scikitbio/","page":"scikit-bio (Python3)","title":"scikit-bio (Python3)","text":"To transition from Python3 to Julia:","category":"page"},{"location":"comparisons/scikitbio/","page":"scikit-bio (Python3)","title":"scikit-bio (Python3)","text":"See Noteworthy differences from Python in the Julia manual for a more in-depth comparison\nUse PythonCall.jl/CondaPkg.jl to seamlessly integrate Python3 code into your Julia project\nUse juliacall to seamlessly integrate Julia code into your Python3 project","category":"page"},{"location":"comparisons/biopython/#biopython","page":"Biopython (Python3)","title":"Biopython (Python3)","text":"","category":"section"},{"location":"comparisons/biopython/","page":"Biopython (Python3)","title":"Biopython (Python3)","text":"Biopython represents an ecosystem of related biology tools written in the Python3 programming language\nUnlike with BioJulia, Biopython tools are installed together as modules into a single biopython package \nLaunched over two decades ago with major releases covering the Python2/3 transition\nCapabilities cover a number of molecular biology applications including sequence alignment, population genetics, and machine learning","category":"page"},{"location":"comparisons/biopython/","page":"Biopython (Python3)","title":"Biopython (Python3)","text":"A few equivalent application tools between BioJulia and Biopython:","category":"page"},{"location":"comparisons/biopython/","page":"Biopython (Python3)","title":"Biopython (Python3)","text":"Application BioJulia packages Biopython objects/modules\nSequence annotation GenomicFeatures, GenomicAnnotations Seq, SeqRecord\nInput/Output FASTX, XAM, BigWig,... Bio.SeqIO, Bio.AlignIO\nSequence alignment BioSequences, BioAlignments Bio.Align\nPopulation genetics PopGen Bio.PopGen","category":"page"},{"location":"comparisons/biopython/","page":"Biopython (Python3)","title":"Biopython (Python3)","text":"A few package/ecosystem equivalents between Julia and Python3:","category":"page"},{"location":"comparisons/biopython/","page":"Biopython (Python3)","title":"Biopython (Python3)","text":"Application Julia Python3\nData manipulation/analysis DataFrames, CSV, Query pandas, Blaze\nPlotting/visualization Plots, Gadfly, Makie matplotlib, seaborn, bokeh, plotnine, VisPy\nStatistical analysis Statistics, HypothesisTests, GLM SciPy, statsmodels\nMachine learning Flux, SciML, Zygote PyTorch, TensorFlow, scikit-learn, JAX\nNumerical mathematics LinearAlgebra, Symbolics NumPy, SciPy, SymPy\nNotebook/report generator IJulia, Pluto, Weave IPython, Jupyter Book\nWeb applications Genie, Franklin Django, Flask, Pelican, Dash","category":"page"},{"location":"comparisons/biopython/","page":"Biopython (Python3)","title":"Biopython (Python3)","text":"A few notable differences between Julia and Python3:","category":"page"},{"location":"comparisons/biopython/","page":"Biopython (Python3)","title":"Biopython (Python3)","text":"Julia Python3\nHigh-level, general-purpose compiled language High-level, general-purpose interpreted language\nExpression-based (statements yield a value) Statement-based (assignment as a statement)\nDynamically typed with multiple dispatch and optional type annotations Dynamically typed with optional type annotations\nBuilt-in parallelism via threads, coroutines (Tasks) Limited (GIL) built-in parallelism via threads, async/await\nExtensive metaprogramming (Lisp-like macros, homoiconicity,...) Less extensive metaprogramming (decorators, metaclasses,...)\nIncluded default package manager No default package manager (poetry, conda, and other alternatives available)\nSingle implementation available (JuliaLang) Multiple implementations available (PyPy, Numba,...)\nArrays are column-major (columns are contiguous in memory) (Numpy) arrays are row-major by default (rows are contiguous in memory)","category":"page"},{"location":"comparisons/biopython/","page":"Biopython (Python3)","title":"Biopython (Python3)","text":"To transition from Python3 to Julia:","category":"page"},{"location":"comparisons/biopython/","page":"Biopython (Python3)","title":"Biopython (Python3)","text":"See Noteworthy differences from Python in the Julia manual for a more in-depth comparison\nUse PythonCall.jl/CondaPkg.jl to seamlessly integrate Python3 code into your Julia project\nUse juliacall to seamlessly integrate Julia code into your Python3 project","category":"page"},{"location":"comparisons/bioperl/#bioperl","page":"BioPerl (Perl5)","title":"BioPerl (Perl5)","text":"","category":"section"},{"location":"comparisons/bioperl/","page":"BioPerl (Perl5)","title":"BioPerl (Perl5)","text":"BioPerl represents an ecosystem of related molecular biology modules written in the Perl5 programming language\nSupported by the Open Bioinformatics Foundation and includes additional utilities and interfaces for common bioinformatics applications\nLaunched in 2002 and has contributed to major scientific achievements including the Human Genome Project","category":"page"},{"location":"comparisons/bioperl/","page":"BioPerl (Perl5)","title":"BioPerl (Perl5)","text":"A few equivalent application tools between BioJulia and BioPerl:","category":"page"},{"location":"comparisons/bioperl/","page":"BioPerl (Perl5)","title":"BioPerl (Perl5)","text":"Application BioJulia packages BioPerl modules/objects\nInput/Output FASTX, XAM, BigWig,... SeqIO\nSequence alignment BioSequences, BioAlignments AlignIO, SimpleAlign\nData structures Kmers, IntervalTrees Bio::Kmer, Bio::Tree\nPopulation Genetics PopGen PopGen","category":"page"},{"location":"comparisons/bioperl/","page":"BioPerl (Perl5)","title":"BioPerl (Perl5)","text":"A few package/ecosystem equivalents between Julia and Perl5:","category":"page"},{"location":"comparisons/bioperl/","page":"BioPerl (Perl5)","title":"BioPerl (Perl5)","text":"Application Julia Perl5\nData manipulation/analysis DataFrames, CSV, Query PDL, Text-CSV\nPlotting/visualization Plots, Gadfly, Makie GDGraph, Chart-GGPlot\nStatistical analysis Statistics, HypothesisTests, GLM Statistics-Descriptive, PDL-Stats\nNumerical mathematics LinearAlgebra, Symbolics PDL-LinearAlgebra, Math-Symbolic\nNotebook/report generator IJulia, Pluto Devel-IPerl\nWeb applications Genie, Franklin Catalyst, Mojolicious","category":"page"},{"location":"comparisons/bioperl/","page":"BioPerl (Perl5)","title":"BioPerl (Perl5)","text":"A few notable differences between Julia and Perl5:","category":"page"},{"location":"comparisons/bioperl/","page":"BioPerl (Perl5)","title":"BioPerl (Perl5)","text":"Julia Perl5\nHigh-level, general-purpose compiled language High-level, general-purpose interpreted language\nDynamically typed with multiple dispatch and optional type annotations Dynamically typed without type annotations support\nBuilt-in parallelism via threads, coroutines (Tasks) Parallelism via threads, external modules (Coro, Parallel,...)\nLisp-inspired metaprogramming (S-expressions, homoiconicity,...) Macro-less metaprogramming capabilities (eval, symbol table manipulation,...)\nSingle language implementation (JuliaLang) Family of related languages/implementations (Perl5, Perl6/Raku, ActivePerl,...)","category":"page"},{"location":"comparisons/bioperl/","page":"BioPerl (Perl5)","title":"BioPerl (Perl5)","text":"To transition from Perl5 to Julia:","category":"page"},{"location":"comparisons/bioperl/","page":"BioPerl (Perl5)","title":"BioPerl (Perl5)","text":"Read the Julia manual for an in-depth look at its internals and features\nSee Running External Programs in the manual for running Perl scripts or other programs from Julia","category":"page"},{"location":"getting_started/toolsinstallation/#toolsinstallation","page":"Installing Development Tools","title":"Installing Development Tools","text":"","category":"section"},{"location":"getting_started/toolsinstallation/#julia-repl","page":"Installing Development Tools","title":"Julia REPL","text":"","category":"section"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"A REPL, or read-eval-print loop, represents a language \"shell\" or program that allows the user to communicate with the programming language interactively with immediate feedback. This allows for exploring the language more deeply than via a script, with rapid prototyping being much quicker and easier to perform.","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"The Julia REPL is included by default in every Julia installation and boasts a number of features to the point that it alone can almost be considered a proper IDE. It should appear the moment you enter julia into your terminal:","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.9.2 (2023-07-05)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia> ","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"We won't go into every feature that the REPL provides, however here is a quick list that most Julia users should know to make the most of this shell:","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"There are 5 Julia REPL modes that serve separate purposes: \nThe Julian (default) mode wherein one can write, load, and test out code\nHelp mode for printing documentation for functions, keywords, etc.\nPkg mode for working with the included package manager and manipulating dependencies/packages\nShell mode to execute system commands (run a terminal from Julia which itself is running from a terminal!) \nSearch modes (forward, reverse) to look through your history of inputs","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"Prompt Key binding\njulia> None (default mode)\nhelp?> ? or ?? (extended help)\n(@v1.x) pkg> ]\nshell> ;\n(reverse-i-search): ^R\n(forward-i-search): ^S","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"If you have a code editor installed on your development machine, you can go back and forth between the Julia session and the editor by entering julia> edit(\"<name of file>\"). You can jump right back into the Julia session once you're  finished!\nYou can get a list of matches to a partially written word by entering the TAB key, which also serves to render an Unicode symbol in the REPL (full list available in the Unicode Input section of the Julia manual): \njulia> pri[TAB]\nprimitive type  print           println         printstyled\njulia> \\pi[TAB] # renders π\nYou can run a standalone script by entering include(\"<name of script>\") in Julian mode. For greater control, the  equivalent of Python3's if __name__ == __main__ condition would be if abspath(<name of program file>) == @__FILE__","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"warning: Warning\nOne common gotcha with the Julia REPL is that there are currently certain code changes that cannot be performed without  restarting your session, such as redefining structs (see the example below). You can mitigate this by adding the  Revise package, although restarting the session is the simplest option.julia> struct Point\n        x::Int\n        y::Int\n    end\n\njulia> struct Point\n        x::Int\n        z::Int\n    end\nERROR: invalid redefinition of constant Point\nStacktrace:\n[1] top-level scope\n@ REPL[2]:1","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"To learn more, see the The Julia REPL section in the Julia manual.","category":"page"},{"location":"getting_started/toolsinstallation/#Visual-Studio-Code-extension","page":"Installing Development Tools","title":"Visual Studio Code extension","text":"","category":"section"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"The Julia organization officially maintains the Julia vscode extension, which provides a complete IDE solution for developing in Julia. This boasts a number of advantages compared to a REPL solution:","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"Built-in syntax highlighting and code completion\nGUI interaction for managing options and commands\nAdvanced profiling/debugging features \nAdditional extensions support ","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"To install vscode, follow the instructions on how to install the official binary for your development machine from the  official website. Next, click on the Extension icon in the side Activity Bar and search for \"Julia\". The official Julia extension should be the first extension available. You can also install Julia within the Quick Open input panel by pressing Ctrl + P and entering ext install julialang.language-julia.","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"<!– TODO: Move image to assets directory –> (Image: Julia VSCode Extension)","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"Install the extension and restart vscode. We also recommend installing some additional extensions that will further improve the development experience:","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"Even Better TOML  (ext install tamasfe.even-better-toml) for working with the package TOML  files (Project.toml, Manifest.toml, Artifacts.toml,...)\nGitLens (ext install eamodio.gitlens) for  enhancing Git workflows","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"<!– TODO: some examples of julia-vscode commands–>","category":"page"},{"location":"getting_started/toolsinstallation/","page":"Installing Development Tools","title":"Installing Development Tools","text":"You can experiment with Julia extension features in the Quick Open panel by writing Julia and consulting the available options. To learn more, visit the Julia in Visual Studio Code page  in the official vscode docs. You can also visit the Julia extension website to learn more about what features are available.","category":"page"},{"location":"#BioJulia:-Fast,-open,-easy,-software-for-biology","page":"BioJulia: Fast, open, easy, software for biology","title":"BioJulia: Fast, open, easy, software for biology","text":"","category":"section"},{"location":"","page":"BioJulia: Fast, open, easy, software for biology","title":"BioJulia: Fast, open, easy, software for biology","text":"Note: This landing site is under extensive development and will receive frequent updates.  It is not in a ready state, and is published under GitHub Pages only for testing purposes. ","category":"page"},{"location":"","page":"BioJulia: Fast, open, easy, software for biology","title":"BioJulia: Fast, open, easy, software for biology","text":"BioJulia is a passionate, community-led organization providing biology-related packages written  in the Julia programming language. The organization offers a comprehensive,  fully open-source ecosystem of both libraries that serve as essential building blocks for other packages  as well as interactive tools for everyday tasks and workflows. ","category":"page"},{"location":"","page":"BioJulia: Fast, open, easy, software for biology","title":"BioJulia: Fast, open, easy, software for biology","text":"Biologists are fully empowered by Julia to easily tackle domain-specific challenges, taking advantage of features including:","category":"page"},{"location":"","page":"BioJulia: Fast, open, easy, software for biology","title":"BioJulia: Fast, open, easy, software for biology","text":"Fully reproducible environments thanks to Julia's built-in package manager\nCompetitive performance that rivals that of lower-level, more complex languages such as C and Fortran\nUnicode-based math symbol support, transparent BLAS integration, and additional features for performing complex numerical operations   \nA batteries-included read-eval-print loop (REPL) for interactive data exploration and prototyping\nSeamless interoperability (JLLs, Cmd,...) with other languages via multiple foreign function interfaces","category":"page"},{"location":"#Where-to-Start?","page":"BioJulia: Fast, open, easy, software for biology","title":"Where to Start?","text":"","category":"section"},{"location":"","page":"BioJulia: Fast, open, easy, software for biology","title":"BioJulia: Fast, open, easy, software for biology","text":"Take a look at all BioJulia code via the official GitHub page.\nBegin contributing ideas and features following the core guidelines.\nDeep dive into the ecosystem over at the Overview.\nStart learning right away using the Getting Started tutorials.\nSee some awesome examples in the BioJulia Showcase.\nCompare performance with the BioJulia Open Benchmarks.\nCome chat with us over in the Slack #biology workspace and on forums.","category":"page"},{"location":"","page":"BioJulia: Fast, open, easy, software for biology","title":"BioJulia: Fast, open, easy, software for biology","text":"Use the top navigation bar to search for provided packages within one's field of interest.","category":"page"},{"location":"getting_started/casescenarios/#casescenarios","page":"Case Scenarios","title":"Case Scenarios","text":"","category":"section"},{"location":"getting_started/casescenarios/#Novel-biotechnology-startup-solutions","page":"Case Scenarios","title":"Novel biotechnology startup solutions","text":"","category":"section"},{"location":"getting_started/casescenarios/#Lab-data-processing,-visualization,-and-analysis","page":"Case Scenarios","title":"Lab data processing, visualization, and analysis","text":"","category":"section"},{"location":"getting_started/casescenarios/#Pharmaceutical-drug-design-pipelines","page":"Case Scenarios","title":"Pharmaceutical drug design pipelines","text":"","category":"section"},{"location":"getting_started/casescenarios/#Modeling-and-simulation-of-biological-systems","page":"Case Scenarios","title":"Modeling and simulation of biological systems","text":"","category":"section"},{"location":"getting_started/casescenarios/#Course-teaching-and-lesson-design","page":"Case Scenarios","title":"Course teaching and lesson design","text":"","category":"section"},{"location":"getting_started/casescenarios/#Research-planning-and-development","page":"Case Scenarios","title":"Research planning and development","text":"","category":"section"},{"location":"getting_started/juliainstallation/#juliainstallation","page":"Installing Julia","title":"Installing Julia","text":"","category":"section"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"There are a number of methods available to install Julia that each have their own advantages:","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"note: Note\nIt is NOT recommended to install Julia from your distribution's package manager, as no such installation  is officially endorsed by the Julia project and thus may be out-of-date and broken/unmaintained!","category":"page"},{"location":"getting_started/juliainstallation/#juliaup-(recommended)","page":"Installing Julia","title":"juliaup (recommended)","text":"","category":"section"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"juliaup is a Julia manager/version multiplexer tool designed to handle your Julia installation from the command-line.  It is the easiest and most convenient installation option, and is available on almost all platforms that support Julia.","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"If you are running Linux or Mac, enter the following command in your terminal:","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"curl -fsSL https://install.julialang.org | sh","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"If you are running Windows, enter the following:","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"winget install julia -s msstore","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"If you have the Rust programming language installed on your machine, you can install juliaup via the Cargo package manager:","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"warning: Warning\nThis is not a recommended option as this will involve compiling the actual juliaup executable on your machine","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"cargo install juliaup","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"You can use the first and last commands listed to install Julia via juliaup in a container (see Docker/Podman below)","category":"page"},{"location":"getting_started/juliainstallation/#Docker/Podman","page":"Installing Julia","title":"Docker/Podman","text":"","category":"section"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"An official Docker image is available, allowing you to build containers with Julia already installed. This can be a preferred method of installation if you wish to test out Julia in a sandboxed, ephemeral (temporary) instance or are looking  to  include Julia in a containerized application.","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"You must first download the image via the Docker or Podman command-line tool:","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"note: Note\nIf you are using Podman, you can replace the keyword docker with podman in any of the following commands!","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"docker pull julia:latest","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"You can specify which version of the image you wish to install via tags, such as latest, rc, 1.6, etc.","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"To create a run the container instance, run the following command:","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"note: Note\nYou may skip the previous step if you have not already downloaded the image, Docker/Podman will automatically begin installing it for  you here!","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"docker run -it --rm --network host julia:latest","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"The above command creates an interactive container that will be deleted the moment you exit via the --rm option and that will also  share the same network namespace as your machine via the --network host option (allow for automatic port bindings). You may remove either option to disable their respective behaviours.","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"The image itself can serve as a base for your custom container built from a Dockerfile/Containerfile:","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"FROM julia:latest\n# ...","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"If you wish to use a different image as the basis of your container, yet still require Julia, you can use any of the other installation methods listed in this section in your Dockerfile/Containerfile. A few examples with juliaup:","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"# First option: Install juliaup via curl\nFROM ubuntu:latest\n\nRUN apt update && \\\n    apt install -y curl && \\\n    curl -fsSL https://install.julialang.org | sh -s -- -y # install juliaup non-interactively\n\nRUN juliaup add release\n\n# Second option: install juliaup in a Rust image (not recommended)\nFROM rust:latest\n\nRUN cargo install juliaup","category":"page"},{"location":"getting_started/juliainstallation/#Direct-download","page":"Installing Julia","title":"Direct download","text":"","category":"section"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"You can also install Julia as a downloadable executable from the Julia website's Download section.  You must make sure to install the correct Julia build for your machine based on:","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"native instruction set (x86_64, i686, ARM, Apple Silicon, PowerPC)\noperating system type (Windows, MacOS, Linux (Glibc), Linux (Musl), FreeBSD)\nbit compute type (32-bit, 64-bit)\ndesired level of support (Tier 1 (guaranteed to build and pass all tests) through Tier 4)","category":"page"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"Make sure to follow the exact installation steps for your machine in order to ensure the best experience.","category":"page"},{"location":"getting_started/juliainstallation/#Build-from-source","page":"Installing Julia","title":"Build from source","text":"","category":"section"},{"location":"getting_started/juliainstallation/","page":"Installing Julia","title":"Installing Julia","text":"For building/testing purposes, you may build Julia from the source code that is fully available in the Julia GitHub repository. Simply enter git clone https://github.com/JuliaLang/julia.git to copy the entire source on your machine, create a new git branch via git checkout -b name-of-branch, add your modifications, and run make to start the Makefile build.","category":"page"}]
}
