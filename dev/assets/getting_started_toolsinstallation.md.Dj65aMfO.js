import{_ as t,c as a,o as i,az as n}from"./chunks/framework.CIUguCsn.js";const l="/BioJuliaDocs/dev/assets/JuliaVSCodeExtension.CwPvEhMM.png",g=JSON.parse('{"title":"Installing Development Tools","description":"","frontmatter":{},"headers":[],"relativePath":"getting_started/toolsinstallation.md","filePath":"getting_started/toolsinstallation.md","lastUpdated":null}'),s={name:"getting_started/toolsinstallation.md"};function o(r,e,p,h,d,u){return i(),a("div",null,e[0]||(e[0]=[n(`<h1 id="toolsinstallation" tabindex="-1">Installing Development Tools <a class="header-anchor" href="#toolsinstallation" aria-label="Permalink to &quot;Installing Development Tools {#toolsinstallation}&quot;">​</a></h1><h2 id="julia-repl" tabindex="-1">Julia REPL <a class="header-anchor" href="#julia-repl" aria-label="Permalink to &quot;Julia REPL {#julia-repl}&quot;">​</a></h2><p>A REPL, or read-eval-print loop, represents a language &quot;shell&quot; or program that allows the user to communicate with the programming language interactively with immediate feedback. This allows for exploring the language more deeply than via a script, with rapid prototyping being much quicker and easier to perform.</p><p>The Julia REPL is included by default in every Julia installation and boasts a number of features to the point that it alone can almost be considered a proper IDE. It should appear the moment you enter <code>julia</code> into your terminal:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   _       _ _(_)_     |  Documentation: https://docs.julialang.org</span></span>
<span class="line"><span>  (_)     | (_) (_)    |</span></span>
<span class="line"><span>   _ _   _| |_  __ _   |  Type &quot;?&quot; for help, &quot;]?&quot; for Pkg help.</span></span>
<span class="line"><span>  | | | | | | |/ _\` |  |</span></span>
<span class="line"><span>  | | |_| | | | (_| |  |  Version 1.9.2 (2023-07-05)</span></span>
<span class="line"><span> _/ |\\__&#39;_|_|_|\\__&#39;_|  |  Official https://julialang.org/ release</span></span>
<span class="line"><span>|__/                   |</span></span>
<span class="line"><span></span></span>
<span class="line"><span>julia&gt;</span></span></code></pre></div><p>Not every feature that the REPL provides will be shown, however here is a quick list that most Julia users should know to make the most of this shell:</p><ul><li>There are 5 Julia REPL modes that serve separate purposes: <ol><li><p>The Julian (default) mode wherein one can write, load, and test out code</p></li><li><p>Help mode for printing documentation for functions, keywords, etc.</p></li><li><p>Pkg mode for working with the included package manager and manipulating dependencies/packages</p></li><li><p>Shell mode to execute system commands (run a terminal from Julia which itself is running from a terminal!)</p></li><li><p>Search modes (forward, reverse) to look through your history of inputs</p></li></ol></li></ul><table tabindex="0"><thead><tr><th style="text-align:center;">Prompt</th><th style="text-align:center;">Key binding</th></tr></thead><tbody><tr><td style="text-align:center;"><code>julia&gt;</code></td><td style="text-align:center;">None (default mode)</td></tr><tr><td style="text-align:center;"><code>help?&gt;</code></td><td style="text-align:center;"><code>?</code> or <code>??</code> (extended help)</td></tr><tr><td style="text-align:center;"><code>(@v1.x) pkg&gt;</code></td><td style="text-align:center;"><code>]</code></td></tr><tr><td style="text-align:center;"><code>shell&gt;</code></td><td style="text-align:center;"><code>;</code></td></tr><tr><td style="text-align:center;"><code>(reverse-i-search):</code></td><td style="text-align:center;"><code>^R</code></td></tr><tr><td style="text-align:center;"><code>(forward-i-search):</code></td><td style="text-align:center;"><code>^S</code></td></tr></tbody></table><ul><li><p>If you have a code editor installed on your development machine, you can go back and forth between the Julia session and the editor by entering <code>julia&gt; edit(&quot;&lt;name of file&gt;&quot;)</code>. You can jump right back into the Julia session once you&#39;re finished!</p></li><li><p>You can get a list of matches to a partially written word by entering the TAB key, which also serves to render an Unicode symbol in the REPL (full list available in the <a href="https://docs.julialang.org/en/v1/manual/unicode-input/" target="_blank" rel="noreferrer">Unicode Input</a> section of the Julia manual):</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pri[TAB]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">primitive type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  print           println         printstyled</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> \\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[TAB] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># renders π</span></span></code></pre></div></li><li><p>You can run a standalone script by entering <code>include(&quot;&lt;name of script&gt;&quot;)</code> in Julian mode. For greater control, the equivalent of Python3&#39;s <code>if __name__ == __main__</code> condition would be <code>if abspath(&lt;name of program file&gt;) == @__FILE__</code></p></li></ul><div class="warning custom-block"><p class="custom-block-title">Warning</p><p>One common gotcha with the Julia REPL is that there are currently certain code changes that cannot be performed without restarting your session, such as redefining structs (see the example below). You can mitigate this by adding the <a href="https://timholy.github.io/Revise.jl/stable/" target="_blank" rel="noreferrer">Revise</a> package, although restarting the session is the simplest option.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Point</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Point</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERROR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> invalid redefinition of constant Point</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Stacktrace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] top</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">level scope</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@ REPL[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div></div><p>To learn more, see the <a href="https://docs.julialang.org/en/v1/stdlib/REPL/" target="_blank" rel="noreferrer">The Julia REPL</a> section in the Julia manual.</p><h2 id="Visual-Studio-Code-extension" tabindex="-1">Visual Studio Code extension <a class="header-anchor" href="#Visual-Studio-Code-extension" aria-label="Permalink to &quot;Visual Studio Code extension {#Visual-Studio-Code-extension}&quot;">​</a></h2><p>The Julia organization officially supports the <a href="https://www.julia-vscode.org/" target="_blank" rel="noreferrer">julia-vscode extension</a> which, together with VSCode, provides a complete solution for developing in Julia similar to a fully integrated development environment (IDE). This boasts a number of advantages compared to a pure REPL-driven solution:</p><ul><li><p>Built-in syntax highlighting and code completion</p></li><li><p>GUI interaction for managing options and commands</p></li><li><p>Advanced profiling/debugging features</p></li><li><p>Additional extensions support</p></li></ul><p>To install vscode, follow the instructions on how to install the official binary for your development machine from the <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">official website</a>. Next, click on the Extension icon in the side Activity Bar and search for &quot;Julia&quot;. The official Julia extension should be the first extension available. You can also install Julia within the Quick Open input panel by pressing <code>Ctrl + P</code> and entering <code>ext install julialang.language-julia</code>.</p><p><img src="`+l+'" alt=""></p><p>Install the extension and restart vscode. We also recommend installing some additional extensions that will further improve the development experience:</p><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=tamasfe.even-better-toml" target="_blank" rel="noreferrer">Even Better TOML</a> (<code>ext install tamasfe.even-better-toml</code>) for working with the package TOML files (Project.toml, Manifest.toml, Artifacts.toml,...)</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens" target="_blank" rel="noreferrer">GitLens</a> (<code>ext install eamodio.gitlens</code>) for enhancing Git workflows</p></li></ul><p>You can experiment with Julia extension features in the Quick Open panel by writing Julia and consulting the available options. To learn more, visit the <a href="https://code.visualstudio.com/docs/languages/julia" target="_blank" rel="noreferrer">Julia in Visual Studio Code</a> page or the <a href="https://www.julia-vscode.org/" target="_blank" rel="noreferrer">Julia extension&#39;s</a> official website.</p><h2 id="Alternative-Editor/IDE-extensions" tabindex="-1">Alternative Editor/IDE extensions <a class="header-anchor" href="#Alternative-Editor/IDE-extensions" aria-label="Permalink to &quot;Alternative Editor/IDE extensions {#Alternative-Editor/IDE-extensions}&quot;">​</a></h2><p>Although <a href="https://www.julia-vscode.org/" target="_blank" rel="noreferrer">julia-vscode</a> is the only officially supported extension, community extensions are available for a range of code editors/IDEs:</p><ul><li><p><a href="https://github.com/JuliaEditorSupport/julia-emacs.git" target="_blank" rel="noreferrer">julia-emacs</a> that integrates a new major mode for developing in Julia</p></li><li><p><a href="https://github.com/JuliaEditorSupport/julia-vim.git" target="_blank" rel="noreferrer">julia-vim</a> to enable Julia support for Vim/Neovim</p></li><li><p><a href="https://github.com/JuliaEditorSupport/Julia-sublime.git" target="_blank" rel="noreferrer">julia-sublime</a> to enable Julia support for Sublime</p></li></ul><p>Certain editors/IDEs, such as <a href="https://godbolt.org/" target="_blank" rel="noreferrer">GodBolt</a> and <a href="https://replit.com/lm/julia" target="_blank" rel="noreferrer">Replit</a>, already support Julia without extensions. Finally, many editors, like <a href="https://micro-editor.github.io/" target="_blank" rel="noreferrer">micro</a>, natively include support for basic features such as code highlighting or simple autocomplete.</p><h2 id="notebooks" tabindex="-1">Notebooks <a class="header-anchor" href="#notebooks" aria-label="Permalink to &quot;Notebooks&quot;">​</a></h2><p>A reactive notebook is an interactive environment that combines elements of a code editor and a REPL into one solution. One writes code in executable blocks of &quot;cells&quot; that can be mixed with text and other assets to create a reproducible document that is shareable and easily manipulable. Notebooks are especially useful for scientific exploration since code can be rapidly prototyped in an isolated environment that can be both visualized and documented in the same file.</p><p>There are two standard methods for working with Julia in notebooks:</p><h3 id="IJulia-Julia-kernel-for-Jupyter" tabindex="-1">IJulia (Julia kernel for Jupyter) <a class="header-anchor" href="#IJulia-Julia-kernel-for-Jupyter" aria-label="Permalink to &quot;IJulia (Julia kernel for Jupyter) {#IJulia-Julia-kernel-for-Jupyter}&quot;">​</a></h3><p>The Julia organization officially supports the <a href="https://julialang.github.io/IJulia.jl/stable/" target="_blank" rel="noreferrer">IJulia</a> kernel, or backend, for Jupyter notebooks, which is the most popular web-based notebook solution.</p><p>To install IJulia/Jupyter and run the notebook server:</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Instead of loading Pkg, one can simply activate pkg mode with the <code>]</code> key and enter <code>(@v1.9) pkg&gt; add &lt;package name here&gt;</code></p></div><ol><li><p>Install Julia via any method mentioned in the <a href="/BioJuliaDocs/dev/getting_started/juliainstallation#juliainstallation">Installing Julia</a> section</p></li><li><p>Open the Julia REPL by entering <code>julia</code> into your terminal</p></li><li><p>Add the IJulia package via the built-in package manager: <code>julia&gt; using Pkg;Pkg.add(&quot;IJulia&quot;)</code></p></li><li><p>Load IJulia and launch the notebook server: <code>julia&gt; using IJulia; notebook()</code> (run <code>notebook(detached=true)</code> if you wish that the notebook, and <code>notebook(dir=&quot;/some/path&quot;)</code> if you wish to open a notebook in a ) server sruns in the background even if the Julia session is closed)</p></li><li><p>Enter <code>y</code> to install Jupyter via Conda if you have not done so already on your machine</p></li></ol><p>The notebook dashboard should open within your web browser. If you already have jupyter installed (<a href="https://jupyter.org/install" target="_blank" rel="noreferrer">Installing Jupyter</a>), you can enter <code>n</code> when prompted by the Julia REPL and instead run <code>jupyter notebook</code> from the terminal. Visit the <a href="https://julialang.github.io/IJulia.jl/stable/manual/running/#Running-IJulia" target="_blank" rel="noreferrer">Running IJulia</a> section in the official IJulia docs for more information.</p><h3 id="Pluto-notebooks" tabindex="-1">Pluto notebooks <a class="header-anchor" href="#Pluto-notebooks" aria-label="Permalink to &quot;Pluto notebooks {#Pluto-notebooks}&quot;">​</a></h3><p><a href="https://plutojl.org/" target="_blank" rel="noreferrer">Pluto.jl</a> is an alternative notebook solution built with Julia in mind. It integrates well with the language and boasts a number of features that are not available or are difficult to achieve with the Jupyter solution:</p><ul><li><p>Works with Julia&#39;s built-in package manager for native reproducibility</p></li><li><p>Live docs feature, essentially Julia&#39;s help mode available within the notebook</p></li><li><p>Works with normal Julia (.jl) files as opposed to .ipynb files</p></li><li><p>Extendable via packages like <a href="https://featured.plutojl.org/basic/plutoui.jl" target="_blank" rel="noreferrer">PlutoUI</a> and <a href="https://github.com/JuliaPluto/PlutoPDF.jl.git" target="_blank" rel="noreferrer">PlutoPDF</a></p></li></ul><p>To install and run the Pluto server:</p><ol><li><p>Install Julia via any method mentioned in the <a href="/BioJuliaDocs/dev/getting_started/juliainstallation#juliainstallation">Installing Julia</a> section</p></li><li><p>Open the Julia REPL by entering <code>julia</code> into your terminal</p></li><li><p>Add the Pluto package via the built-in package manager: <code>julia&gt; using Pkg;Pkg.add(&quot;Pluto&quot;)</code></p></li><li><p>Load Pluto and launch the notebook server: <code>julia&gt; using Pluto; Pluto.run()</code></p></li><li><p>Copy/paste the given URL (<a href="http://localhost" target="_blank" rel="noreferrer">http://localhost</a>:...) into your web browser</p></li></ol><p>A number of featured notebooks are <a href="https://featured.plutojl.org/" target="_blank" rel="noreferrer">available online</a> that include basic tutorials and powerful demonstrations achieved with Pluto.</p>',38)]))}const k=t(s,[["render",o]]);export{g as __pageData,k as default};
