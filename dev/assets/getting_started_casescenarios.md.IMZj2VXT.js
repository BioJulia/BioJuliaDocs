import{_ as a,c as t,o as r,az as i}from"./chunks/framework.CIUguCsn.js";const u=JSON.parse('{"title":"Case Scenarios","description":"","frontmatter":{},"headers":[],"relativePath":"getting_started/casescenarios.md","filePath":"getting_started/casescenarios.md","lastUpdated":null}'),o={name:"getting_started/casescenarios.md"};function n(s,e,l,h,c,d){return r(),t("div",null,e[0]||(e[0]=[i('<h1 id="casescenarios" tabindex="-1">Case Scenarios <a class="header-anchor" href="#casescenarios" aria-label="Permalink to &quot;Case Scenarios {#casescenarios}&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Note</p><p>These scenarios are based on experiences and case studies from fellow members of the BioJulia/Julia community!</p></div><h2 id="industry" tabindex="-1">Industry <a class="header-anchor" href="#industry" aria-label="Permalink to &quot;Industry&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">Tip</p><p>Visit <a href="https://juliahub.com/case-studies/" target="_blank" rel="noreferrer">JuliaHub</a> for real-world case studies of Julia in multiple areas of industry!</p></div><p>A biotechnology-oriented collaborative research organization has ordered their IT department to organize the first in-house software development division. Researchers and other essential personnel are divided into teams that each serve one client at a time, though they all share the same laboratory and equipment. The need for an in-house programming division has arisen based on feedback from these teams facing many similar problems with the current workplace setup:</p><ul><li><p>The researchers may not be digitally literate, thus they require more accessible user experiences</p></li><li><p>Lessening the number of tools they are required to learn would ideally reduce complexity and onboarding time</p></li><li><p>Some workflows can be repetitive and could take advantage of some automation to reduce overall time</p></li></ul><p>It is thus decided that an employee-facing platform should be created that will host a suite of simple, web-based software tools. These can include tools usable by any employee or by only one or several teams depending on their needs. The new division is given the following objectives:</p><ul><li><p>Collaborate with the researchers and understand their software requirements</p></li><li><p>Use modern languages/frameworks to avoid technical headaches and allow for faster onboarding</p></li><li><p>Ensure access to both general and scientific libraries when needed for a specific tool</p></li></ul><p>Upon reviewing these objectives, the division begins discussing which tech stacks they should use. With a mix of veteran and junior talent, as well as a desire to allow for fast time-to-deployment and performance, it is agreed that a modern, higher-level programming language would be ideal. One of the collaborating researchers suggests they look into Julia, which has been the scripting language of choice amongst some of the teams for automating several workflows, and the division gives it a go following some research and planning.</p><p>The platform and first two tools for the collaborating researcher&#39;s team are prototyped. The stack is built upon the <a href="https://genieframework.com/" target="_blank" rel="noreferrer">Genie</a> web framework, which, crucially, enables authorization/authentication support on a team-by-team basis and HTML/CSS/JS interoperability. The entire platform is designed as a reactive app that can be deployed anywhere and is almost entirely written in Julia for both the frontend and backend. Further Genie ecosystem packages and plugins spur potential ideas like taking advantage of the included no-code <a href="https://learn.genieframework.com/guides/genie-builder" target="_blank" rel="noreferrer">UI builder</a> for producing analytics dashboards built by each team without advanced programming expertise.</p><p>The first tool conceived allows teams to upload, download, and manage files or datasets within the company&#39;s shared drive from the web. It is designed to handle data management on its own without the employees needing to remember specific drive locations or other details, their only responsibility being categorization (data pulled from which instrument, for which project, etc.). The tool is able to manage the data by working with the company&#39;s S3 and S3 Glacier storage instances via the <a href="https://juliacloud.github.io/AWS.jl/stable/" target="_blank" rel="noreferrer">AWS</a> package. A user-facing feature is also included that generates an <code>Artifacts.toml</code> file, allowing researchers to use Julia&#39;s <a href="https://pkgdocs.julialang.org/v1/artifacts/" target="_blank" rel="noreferrer">Artifact system</a> to declaratively point to select data and download them when required for their local needs. For the more tech savvy user, an input feature is set up to allow for <a href="https://duckdb.org/" target="_blank" rel="noreferrer">DuckDB</a> database queries for large datasets. An <a href="https://duckdb.org/docs/api/julia.html" target="_blank" rel="noreferrer">official Julia package</a> is provided for this DBMS, however, one incredible feature of the language is the ability to bundle external programs written in other languages and treat them as first-class Julia packages, known as <a href="https://docs.binarybuilder.org/stable/jll/#JLL-packages" target="_blank" rel="noreferrer">JLLs</a>. The official package wraps the <code>DuckDB_jll</code> bundle, which the developers can manage as a separate dependency for more direct interaction with the DBMS. This feature, to their delight, also means that porting over common, open scientific software for more specific tools can be as simple as generating their JLLs and managing them directly via Julia. Seamless interoperability also extends to the ability to interact with codes from other languages such as Python with <a href="https://juliapy.github.io/PythonCall.jl/stable/" target="_blank" rel="noreferrer">PythonCall</a>/<a href="https://github.com/JuliaPy/CondaPkg.jl" target="_blank" rel="noreferrer">CondaPkg</a> and R with <a href="https://juliainterop.github.io/RCall.jl/stable/" target="_blank" rel="noreferrer">RCall</a>.</p><p>The second tool conceived is designed specifically for the collaborating researcher who needs to determine total cell count following each cell passage. The user uploads a photo of a stained cell culture sample, along with inputs such as total medium volume and dilution factor. The developers make use of the <a href="https://juliaimages.org/stable/pkgs/segmentation/#ImageSegmentation.jl" target="_blank" rel="noreferrer">ImageSegmentation</a> package for differentiating live and dead cells through the use of the watershed algorithm. A side-by-side view is generated with the original and segmented image, as well as the total number of markers indicating the amount of live cells, being differentiable due to their staining. Although only a prototype, the developers believe it would be more than possible, thanks to the number of large Julia packages already available, to employ basic machine learning to simplify the process and increase accuracy. Aside from other imaging packages like <a href="https://juliaimages.org/stable/pkgs/axes/#ImageAxes.jl" target="_blank" rel="noreferrer">ImageAxes</a>, OpenCV has already been ported over <a href="https://juliahub.com/ui/Packages/General/OpenCV_jll" target="_blank" rel="noreferrer">as a JLL</a> for direct development, and a host of packages are available within the <a href="https://sciml.ai/" target="_blank" rel="noreferrer">SciML</a> ecosystem for building the machine learning model.</p><p>The trial period with the collaborating researcher&#39;s team proves to be a success, and the company decides to fully commit to this platform, almost fully written in Julia, with additional resources and manpower. Novel ideas are excitedly tossed about internally over which tools can further improve workflows, such as replacing their electronic lab notebook systems with <a href="https://plutojl.org/" target="_blank" rel="noreferrer">Pluto</a> and embedding a quick statistics calculator for linear regression modelling with packages including <a href="https://juliastats.org/GLM.jl/stable/" target="_blank" rel="noreferrer">GLM</a> and <a href="https://makie.org/" target="_blank" rel="noreferrer">Makie</a>. It is even discussed how Julia may allow the company to eventually commercialize these tools for other contract research organizations that face the same challenges.</p><h2 id="research" tabindex="-1">Research <a class="header-anchor" href="#research" aria-label="Permalink to &quot;Research&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">Tip</p><p>Visit <a href="https://joss.theoj.org/" target="_blank" rel="noreferrer">The Journal of Open Source Software</a> and <a href="https://proceedings.juliacon.org/" target="_blank" rel="noreferrer">JuliaCon Proceedings</a> to explore several research packages written in Julia!</p></div><p>A freshly minted researcher begins the morning with a new directive from the principal investigator. Their lab specializes in translational cancer immunotherapy, and as of late have been exploring a potential avenue for T-cell activation in patients with with a rare type of lymphoma. It is hoped that strengthening the expression of specific peptides involved in cellular adaptive immune response can lead to more effective treatment of this specific cancer. One patient&#39;s blood has been sampled and delivered to the lab, with the goal of extacting and combing through the resulting expression data from various antigen-presenting cells (APCs) to identify abnormal peptide expression levels.</p><p>The researcher understands that the exploratory nature of this project will require an interactive environment from which results can be rapidly generated and saved/discarded when need be. Previously, a number of challenges would get in the way of this workflow:</p><ul><li><p>Working with interactive languages had proven to be a hassle due to issues like competing build systems and environments</p></li><li><p>The REPL experience was often lacking due to missing features or lack of integrations with other tools like a package manager</p></li><li><p>Notebooks, while good for experimenting, can come with their own problems such as slow speeds and difficulties with deployment and versioning</p></li><li><p>Writing high-performance software would require lower-level languages like C or Fortran, which would prove difficult for scientists without a computer science background</p></li></ul><p>They remember previously experimenting with Julia before it was considered stable, and decide to give it a second go. Installation proved to be very simple with the <a href="https://github.com/JuliaLang/juliaup#installation" target="_blank" rel="noreferrer">juliaup</a> tool, and they proceed to read up on the basics from the <a href="https://docs.julialang.org/en/v1/" target="_blank" rel="noreferrer">Julia manual</a>. The first step, upon loading the Julia REPL, is to add the <a href="https://juliadynamics.github.io/DrWatson.jl/stable/" target="_blank" rel="noreferrer">DrWatson</a> package to better track the project. With DrWatson and the built-in package manager, the researcher can geneate reproducible code for simulations, plotting, and data preparation.</p><p>At the same time, the researcher isolates the APCs via a microfluidic cell-sorting device. The patient&#39;s cells are encapsulated into individual droplets from which single-cell profiling can occur via Droplet-Sequencing (Drop-seq). The resulting data is stored in <a href="https://www.wikiwand.com/en/Hierarchical_Data_Format" target="_blank" rel="noreferrer">.h5 files</a> on the lab&#39;s shared drive. The researcher generates an <code>Artifacts.toml</code> file that utilizes Julia&#39;s built-in <a href="https://pkgdocs.julialang.org/v1/artifacts/" target="_blank" rel="noreferrer">Artifact system</a> to point to these files in a persistent and reproducible manner every time the project needs to be shared with others on their own machines. The researcher makes quick work of loading the data into Julia with the <a href="https://juliaio.github.io/HDF5.jl/stable/" target="_blank" rel="noreferrer">HDF5</a> package, and applies a number of steps with <a href="https://dataframes.juliadata.org/stable/" target="_blank" rel="noreferrer">DataFrames</a>, <a href="https://tidierorg.github.io/TidierData.jl/latest/" target="_blank" rel="noreferrer">TidierData</a>, and <a href="https://github.com/jkrumbiegel/Chain.jl" target="_blank" rel="noreferrer">Chain</a> to transform, normalize, and filter the data. Finally, principle component analysis (PCA) with <a href="https://biojulia.dev/SingleCellProjections.jl/stable/" target="_blank" rel="noreferrer">SingleCellProjections</a> is conducted, visualized with the help of the <a href="https://makie.org/" target="_blank" rel="noreferrer">Makie</a> plotting package.</p><p>The whole project is saved by DrWatson and shared with the P. I. for further discussion. PCA analysis leads them to focus on a narrow subset of APCs with elevated peptide expression levels which will be followed up in subsequent studies. The researcher prepares a more digestible format of the results as a <a href="https://plutojl.org/" target="_blank" rel="noreferrer">Pluto notebook</a> to share with colleagues the more pertinent observations, and finally a more formal research report with Julia code included is written with <a href="https://weavejl.mpastell.com/stable/" target="_blank" rel="noreferrer">Weave</a>. The lab is impressed with what was achieved with Julia, with many remarking how effortless it seemed to achieve excellent performance with such a high-level language.</p><h2 id="education" tabindex="-1">Education <a class="header-anchor" href="#education" aria-label="Permalink to &quot;Education&quot;">​</a></h2><p>A new teacher was recently hired to teach a biostatistics course for first-year students at the University of Concordia. This will be a new offering at the university, thus they have been given free reign to design their own course plan. They are most interested in engaging students with a fun, practical component, including assignments that are trivial to set up, easy for students to learn, and that draw from real-world examples. They look for inspiration from similar courses, and finds that many are aiming to develop a strong foundation in statistical programming for handling data analysis, hypothesis testing, and other tasks.</p><p>A number of these courses teach R or Python3, which have been entrenched in statistics for a number of years. They also appear to be popular with new programmers due to being high-level and easy to learn. However, the new teacher encounters a number of issues that raise concern:</p><ul><li><p>Performance would become an issue with larger datasets or visual plots, with the interpreter taking too long to generate output and thus wasting valuable class time</p></li><li><p>Both languages have been around for a long time, with a number of quirks and design decisions that have not aged well such as implicit mutation or lack of type annotations</p></li><li><p>Setting up reproducible environments with all the necessary bits (packages, data, ...) in either language is challenging, with a number of limitations and choices presented including package manager, language implementation, etc.</p></li><li><p>R is designed specifically for statistical computing, with concepts not found in other, more general languages (S3/S4 class system, factors, ...) which could confuse students with previous programming knowledge or those wishing to learn more common computer science concepts</p></li><li><p>There is a desire to avoid the &quot;two-language problem&quot; wherein parts of either language are written in another and thus introduce unneeded complexity</p></li></ul><p>A fellow professor recommends that they look into Julia, which has already found success within certain departments. Beyond addressing many of the issues encountered with R and Python3, it is especially enjoyable how fast the performance is, how the default package manager allows for reproducibility and ease of use, and how close to mathematical writing Julia can get whilst remaining readable.</p><p>The first objective is to create a presentation format with good aesthetics that can also show off and run code. They discover how to set up interactive notebooks with <a href="https://plutojl.org/" target="_blank" rel="noreferrer">Pluto</a> that will be hosted in a <a href="https://github.com/" target="_blank" rel="noreferrer">central repository</a> or online via a website or with solutions like <a href="https://pluto-on-binder.glitch.me/" target="_blank" rel="noreferrer">Binder</a>. This has a number of advantages compared to PowerPoint or Markdown presentations:</p><ul><li><p>Easily run and experiment with code cells within a reproducible environment</p></li><li><p>Dependency management automatically handled via the built-in package manager</p></li><li><p>Share the code and lessons with students either as notebooks or as exported PDF/HTML pages</p></li></ul><p>To bundle the datasets with the notebooks, they take advantage of Julia&#39;s <a href="https://pkgdocs.julialang.org/v1/artifacts/" target="_blank" rel="noreferrer">Artifact system</a> for handling and retrieving data from almost anywhere on the Internet.</p><p>With the course infrastructure set, attention is now put towards creating the actual course material. They can cover a number of biostatistics topics using powerful, well-established Julia packages:</p><ul><li><p><a href="https://docs.juliaplots.org/stable/" target="_blank" rel="noreferrer">Plots</a> or <a href="https://docs.makie.org/stable/" target="_blank" rel="noreferrer">Makie</a> for data visualization</p></li><li><p><a href="https://dataframes.juliadata.org/stable/" target="_blank" rel="noreferrer">DataFrames</a>, <a href="https://csv.juliadata.org/stable/" target="_blank" rel="noreferrer">CSV</a>, and <a href="https://tidierorg.github.io/Tidier.jl/dev/" target="_blank" rel="noreferrer">Tidier</a> for data handling</p></li><li><p>[Statistics] and [StatsBase] for general statistical functionality (scalar statistics, estimation, ...)</p></li><li><p><a href="https://juliastats.org/Distributions.jl/stable/" target="_blank" rel="noreferrer">Distributions</a> for probability and sampling</p></li><li><p><a href="https://juliastats.org/HypothesisTests.jl/stable/" target="_blank" rel="noreferrer">HypothesisTests</a> for parametric (ANOVA, chi-squared, ...) and non-parametric testing</p></li><li><p><a href="https://juliastats.org/GLM.jl/stable/" target="_blank" rel="noreferrer">GLM</a> for generalized linear modelling</p></li><li><p><a href="https://fluxml.ai/" target="_blank" rel="noreferrer">Flux</a> or <a href="https://alan-turing-institute.github.io/MLJ.jl/stable/" target="_blank" rel="noreferrer">MLJ</a> for basic machine learning</p></li></ul><p>The course agenda is now almost complete. However, just before the start of the semester, a new lesson on Tukey&#39;s honest significance test is added. Unfortunately, there is no package written in Julia for this test, and there is little time left to develop the code on their own. Luckily, Julia posseses amazing interoperability with both Python3 and R, and they discover how to both call and bundle Scipy&#39;s <code>stats.tukey_hsd</code> function via <a href="https://cjdoris.github.io/PythonCall.jl/stable/" target="_blank" rel="noreferrer">PythonCall</a> and <a href="https://github.com/cjdoris/CondaPkg.jl" target="_blank" rel="noreferrer">CondaPkg</a>.</p><p>The teacher goes on to deliver one of the best courses that semester, empowered by Julia to deliver an engaging, interactive experience that teaches students both the fundamentals of biostatistics and of quality programming.</p>',33)]))}const g=a(o,[["render",n]]);export{u as __pageData,g as default};
