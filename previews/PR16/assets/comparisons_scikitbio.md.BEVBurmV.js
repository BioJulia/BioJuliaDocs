import{_ as e,c as a,o as l,az as r}from"./chunks/framework.D4wCFcVx.js";const h=JSON.parse('{"title":"scikit-bio (Python3)","description":"","frontmatter":{},"headers":[],"relativePath":"comparisons/scikitbio.md","filePath":"comparisons/scikitbio.md","lastUpdated":null}'),i={name:"comparisons/scikitbio.md"};function o(n,t,s,d,g,c){return l(),a("div",null,t[0]||(t[0]=[r('<h1 id="scikitbio" tabindex="-1">scikit-bio (Python3) <a class="header-anchor" href="#scikitbio" aria-label="Permalink to &quot;scikit-bio (Python3) {#scikitbio}&quot;">â€‹</a></h1><ul><li><p><a href="http://scikit-bio.org/" target="_blank" rel="noreferrer">scikit-bio</a> represents a Python3 library providing data structures, algorithms, and additional bioinformatics resources</p></li><li><p>Unlike with BioJulia, scikit-bio tools are installed together as modules into a single <code>skbio</code> package</p></li><li><p>Launched in 2014 based on a BSD-relicensing of PyCogent and QIIME code and is currently in beta/maintenance mode</p></li></ul><p><strong>A few equivalent application tools between BioJulia and scikit-bio:</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;">Application</th><th style="text-align:left;">BioJulia packages</th><th style="text-align:left;">scikit-bio modules</th></tr></thead><tbody><tr><td style="text-align:left;">Sequence alignment</td><td style="text-align:left;"><a href="https://biojulia.dev/BioSequences.jl/stable/" target="_blank" rel="noreferrer">BioSequences</a>, <a href="https://biojulia.dev/BioAlignments.jl/stable/" target="_blank" rel="noreferrer">BioAlignments</a></td><td style="text-align:left;"><code>skbio.sequence</code>, <code>skbio.alignment</code></td></tr><tr><td style="text-align:left;">Input/Output</td><td style="text-align:left;"><a href="https://biojulia.dev/FASTX.jl/stable/" target="_blank" rel="noreferrer">FASTX</a>, <a href="https://biojulia.dev/XAM.jl/stable/" target="_blank" rel="noreferrer">XAM</a>, <a href="https://biojulia.dev/BigWig.jl/dev/" target="_blank" rel="noreferrer">BigWig</a>,...</td><td style="text-align:left;"><code>skbio.io</code></td></tr><tr><td style="text-align:left;">Data structures</td><td style="text-align:left;"><a href="https://biojulia.dev/IntervalTrees.jl/stable/" target="_blank" rel="noreferrer">IntervalTrees</a></td><td style="text-align:left;"><code>skbio.tree</code></td></tr></tbody></table><p><strong>A few package/ecosystem equivalents between Julia and Python3:</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;">Application</th><th style="text-align:left;">Julia</th><th style="text-align:left;">Python3</th></tr></thead><tbody><tr><td style="text-align:left;">Data manipulation/analysis</td><td style="text-align:left;"><a href="https://dataframes.juliadata.org/stable/" target="_blank" rel="noreferrer">DataFrames</a>, <a href="https://csv.juliadata.org/stable/" target="_blank" rel="noreferrer">CSV</a>, <a href="https://www.queryverse.org/Query.jl/stable/" target="_blank" rel="noreferrer">Query</a></td><td style="text-align:left;"><code>pandas</code>, <code>Blaze</code></td></tr><tr><td style="text-align:left;">Plotting/visualization</td><td style="text-align:left;"><a href="https://docs.juliaplots.org/stable/" target="_blank" rel="noreferrer">Plots</a>, <a href="http://gadflyjl.org/stable/" target="_blank" rel="noreferrer">Gadfly</a>, <a href="https://docs.makie.org/stable/" target="_blank" rel="noreferrer">Makie</a>, <a href="https://github.com/TidierOrg/TidierPlots.jl" target="_blank" rel="noreferrer">TidierPlots</a></td><td style="text-align:left;"><code>matplotlib</code>, <code>seaborn</code>, <code>bokeh</code>, <code>plotnine</code>, <code>VisPy</code></td></tr><tr><td style="text-align:left;">Statistical analysis</td><td style="text-align:left;"><a href="https://docs.julialang.org/en/v1/stdlib/Statistics/" target="_blank" rel="noreferrer">Statistics</a>, <a href="https://github.com/JuliaStats/HypothesisTests.jl" target="_blank" rel="noreferrer">HypothesisTests</a>, <a href="https://github.com/JuliaStats/GLM.jl" target="_blank" rel="noreferrer">GLM</a></td><td style="text-align:left;"><code>SciPy</code>, <code>statsmodels</code></td></tr><tr><td style="text-align:left;">Machine learning</td><td style="text-align:left;"><a href="https://fluxml.ai/Flux.jl/stable/" target="_blank" rel="noreferrer">Flux</a>, <a href="https://sciml.ai/" target="_blank" rel="noreferrer">SciML</a>, <a href="https://alan-turing-institute.github.io/MLJ.jl/stable/" target="_blank" rel="noreferrer">MLJ</a>, <a href="https://fluxml.ai/Zygote.jl/stable/" target="_blank" rel="noreferrer">Zygote</a></td><td style="text-align:left;"><code>PyTorch</code>, <code>TensorFlow</code>, <code>scikit-learn</code>, <code>JAX</code></td></tr><tr><td style="text-align:left;">Numerical mathematics</td><td style="text-align:left;"><a href="https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/" target="_blank" rel="noreferrer">LinearAlgebra</a>, <a href="https://symbolics.juliasymbolics.org/stable/" target="_blank" rel="noreferrer">Symbolics</a></td><td style="text-align:left;"><code>NumPy</code>, <code>SciPy</code>, <code>SymPy</code></td></tr><tr><td style="text-align:left;">Notebook/report generator</td><td style="text-align:left;"><a href="https://julialang.github.io/IJulia.jl/stable/" target="_blank" rel="noreferrer">IJulia</a>, <a href="https://plutojl.org/" target="_blank" rel="noreferrer">Pluto</a>, <a href="https://weavejl.mpastell.com/stable/" target="_blank" rel="noreferrer">Weave</a></td><td style="text-align:left;"><code>IPython</code>, <code>Jupyter Book</code></td></tr><tr><td style="text-align:left;">Web applications</td><td style="text-align:left;"><a href="https://genieframework.com/" target="_blank" rel="noreferrer">Genie</a>, <a href="https://franklinjl.org/" target="_blank" rel="noreferrer">Franklin</a></td><td style="text-align:left;"><code>Django</code>, <code>Flask</code>, <code>Pelican</code>, <code>Dash</code></td></tr></tbody></table><p><strong>A few notable differences between Julia and Python3:</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;">Julia</th><th style="text-align:left;">Python3</th></tr></thead><tbody><tr><td style="text-align:left;">High-level, general-purpose compiled language</td><td style="text-align:left;">High-level, general-purpose interpreted language</td></tr><tr><td style="text-align:left;">Expression-based (statements yield a value)</td><td style="text-align:left;">Statement-based (assignment as a statement)</td></tr><tr><td style="text-align:left;">Dynamically typed with multiple dispatch and optional type annotations</td><td style="text-align:left;">Dynamically typed with optional type annotations</td></tr><tr><td style="text-align:left;">Built-in parallelism via threads, coroutines (Tasks)</td><td style="text-align:left;">Limited (GIL) built-in parallelism via threads, async/await</td></tr><tr><td style="text-align:left;">Extensive metaprogramming (Lisp-like macros, homoiconicity,...)</td><td style="text-align:left;">Less extensive metaprogramming (decorators, metaclasses,...)</td></tr><tr><td style="text-align:left;">Included default package manager</td><td style="text-align:left;">No default package manager (poetry, conda, and other alternatives available)</td></tr><tr><td style="text-align:left;">Single implementation available (JuliaLang)</td><td style="text-align:left;">Multiple implementations available (PyPy, Numba,...)</td></tr><tr><td style="text-align:left;">Arrays are column-major (columns are contiguous in memory)</td><td style="text-align:left;">(Numpy) arrays are row-major by default (rows are contiguous in memory)</td></tr></tbody></table><p><strong>To transition from Python3 to Julia:</strong></p><ul><li><p>See <a href="https://docs.julialang.org/en/v1/manual/noteworthy-differences/#Noteworthy-differences-from-Python" target="_blank" rel="noreferrer">Noteworthy differences from Python</a> in the Julia manual for a more in-depth comparison</p></li><li><p>Use <a href="https://github.com/cjdoris/PythonCall.jl.git" target="_blank" rel="noreferrer">PythonCall.jl</a>/<a href="https://github.com/JuliaPy/CondaPkg.jl.git" target="_blank" rel="noreferrer">CondaPkg.jl</a> to seamlessly integrate Python3 code into your Julia project</p></li><li><p>Use <a href="https://pypi.org/project/juliacall/" target="_blank" rel="noreferrer">juliacall</a> to seamlessly integrate Julia code into your Python3 project</p></li></ul>',10)]))}const y=e(i,[["render",o]]);export{h as __pageData,y as default};
