import{_ as e,c as a,o as l,az as r}from"./chunks/framework.DiV9SzYZ.js";const p=JSON.parse('{"title":"BioJava (Java)","description":"","frontmatter":{},"headers":[],"relativePath":"comparisons/biojava.md","filePath":"comparisons/biojava.md","lastUpdated":null}'),i={name:"comparisons/biojava.md"};function n(o,t,s,d,g,f){return l(),a("div",null,t[0]||(t[0]=[r('<h1 id="biojava" tabindex="-1">BioJava (Java) <a class="header-anchor" href="#biojava" aria-label="Permalink to &quot;BioJava (Java) {#biojava}&quot;">â€‹</a></h1><ul><li><p><a href="https://biojava.org/index.html" target="_blank" rel="noreferrer">BioJava</a> is a biological data processing library written in the Java programming language</p></li><li><p>BioJava tooling is distributed via multiple classes within the same <code>org.biojava</code> package</p></li><li><p>Launched in 2002 with six major releases covering more than 11 Java releases</p></li></ul><p><strong>A few equivalent applications between BioJulia and BioJava:</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;">Application</th><th style="text-align:left;">BioJulia packages</th><th style="text-align:left;">BioJava modules</th></tr></thead><tbody><tr><td style="text-align:left;">Input/Output</td><td style="text-align:left;"><a href="https://biojulia.dev/FASTX.jl/stable/" target="_blank" rel="noreferrer">FASTX</a>, <a href="https://biojulia.dev/XAM.jl/stable/" target="_blank" rel="noreferrer">XAM</a>, <a href="https://biojulia.dev/BigWig.jl/dev/" target="_blank" rel="noreferrer">BigWig</a>,...</td><td style="text-align:left;"><code>nbio.genome.io.fastq</code>, <code>nbio.ontology.obo</code>,...</td></tr><tr><td style="text-align:left;">Sequence alignment</td><td style="text-align:left;"><a href="https://biojulia.dev/BioSequences.jl/stable/" target="_blank" rel="noreferrer">BioSequences</a>, <a href="https://biojulia.dev/BioAlignments.jl/stable/" target="_blank" rel="noreferrer">BioAlignments</a></td><td style="text-align:left;"><code>nbio.sequence</code>, <code>nbio.alignment</code></td></tr><tr><td style="text-align:left;">Macromolecular structures</td><td style="text-align:left;"><a href="https://biojulia.dev/BioStructures.jl/stable/" target="_blank" rel="noreferrer">BioStructures</a></td><td style="text-align:left;"><code>nbio.structure</code></td></tr></tbody></table><p><strong>A few package/ecosystem equivalents between Julia and Java:</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;">Application</th><th style="text-align:left;">Julia</th><th style="text-align:left;">Java</th></tr></thead><tbody><tr><td style="text-align:left;">Data manipulation/analysis</td><td style="text-align:left;"><a href="https://dataframes.juliadata.org/stable/" target="_blank" rel="noreferrer">DataFrames</a>, <a href="https://csv.juliadata.org/stable/" target="_blank" rel="noreferrer">CSV</a>, <a href="https://www.queryverse.org/Query.jl/stable/" target="_blank" rel="noreferrer">Query</a></td><td style="text-align:left;"><code>Tablesaw</code></td></tr><tr><td style="text-align:left;">Plotting/visualization</td><td style="text-align:left;"><a href="https://docs.juliaplots.org/stable/" target="_blank" rel="noreferrer">Plots</a>, <a href="https://docs.makie.org/stable/" target="_blank" rel="noreferrer">Makie</a>, <a href="https://github.com/TidierOrg/TidierPlots.jl" target="_blank" rel="noreferrer">TidierPlots</a></td><td style="text-align:left;"><code>JFreeChart</code>, <code>Jzy3d</code></td></tr><tr><td style="text-align:left;">Statistical analysis</td><td style="text-align:left;"><a href="https://docs.julialang.org/en/v1/stdlib/Statistics/" target="_blank" rel="noreferrer">Statistics</a>, <a href="https://github.com/JuliaStats/HypothesisTests.jl" target="_blank" rel="noreferrer">HypothesisTests</a></td><td style="text-align:left;"><code>Statistics (Apache Commons)</code>, <code>NM Dev</code></td></tr><tr><td style="text-align:left;">Machine learning</td><td style="text-align:left;"><a href="https://fluxml.ai/Flux.jl/stable/" target="_blank" rel="noreferrer">Flux</a>, <a href="https://sciml.ai/" target="_blank" rel="noreferrer">SciML</a>, <a href="https://alan-turing-institute.github.io/MLJ.jl/stable/" target="_blank" rel="noreferrer">MLJ</a></td><td style="text-align:left;"><code>Java-ML</code>, <code>Neuroph</code></td></tr><tr><td style="text-align:left;">Numerical mathematics</td><td style="text-align:left;"><a href="https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/" target="_blank" rel="noreferrer">LinearAlgebra</a></td><td style="text-align:left;"><code>NM Dev</code></td></tr><tr><td style="text-align:left;">Notebook/report generator</td><td style="text-align:left;"><a href="https://julialang.github.io/IJulia.jl/stable/" target="_blank" rel="noreferrer">IJulia</a>, <a href="https://plutojl.org/" target="_blank" rel="noreferrer">Pluto</a></td><td style="text-align:left;"><code>IJava</code></td></tr><tr><td style="text-align:left;">Web applications</td><td style="text-align:left;"><a href="https://genieframework.com/" target="_blank" rel="noreferrer">Genie</a>, <a href="https://franklinjl.org/" target="_blank" rel="noreferrer">Franklin</a></td><td style="text-align:left;"><code>Grails</code>, <code>Javalin</code></td></tr></tbody></table><p><strong>A few notable differences between Julia and Java:</strong></p><table tabindex="0"><thead><tr><th style="text-align:left;">Julia</th><th style="text-align:left;">Java</th></tr></thead><tbody><tr><td style="text-align:left;">High-level, general-purpose compiled language</td><td style="text-align:left;">High-level, object-oriented, two-step (compiled and interpreted) language</td></tr><tr><td style="text-align:left;">Expression-based (statements yield a value)</td><td style="text-align:left;">Statement-based (assignment as a statement)</td></tr><tr><td style="text-align:left;">Dynamically typed with multiple dispatch and optional type annotations</td><td style="text-align:left;">Statically typed with required type declarations</td></tr><tr><td style="text-align:left;">Built-in parallelism via threads, coroutines (Tasks)</td><td style="text-align:left;">Built-in parallelism via threads, streams, fibers (Project Loom)</td></tr><tr><td style="text-align:left;">Extensive metaprogramming (Lisp-like macros, homoiconicity,...)</td><td style="text-align:left;">Less extensive metaprogramming (reflection, annotations,...)</td></tr><tr><td style="text-align:left;">Included default package manager</td><td style="text-align:left;">No default package manager (dependency/build management tools include Maven, Gradle,...)</td></tr><tr><td style="text-align:left;">Single implementation available (JuliaLang)</td><td style="text-align:left;">Multiple implementations available (OpenJDK, GraalVM,...)</td></tr></tbody></table><p><strong>To transition from Java to Julia:</strong></p><ul><li><p>Use <a href="https://juliainterop.github.io/JavaCall.jl/" target="_blank" rel="noreferrer">JavaCall.jl</a> to seamlessly integrate Java code into your Julia project</p></li><li><p>See <a href="https://docs.julialang.org/en/v1/manual/running-external-programs/" target="_blank" rel="noreferrer">Running External Programs</a> in the Julia manual for running Java scripts or other programs from Julia</p></li></ul>',10)]))}const h=e(i,[["render",n]]);export{p as __pageData,h as default};
